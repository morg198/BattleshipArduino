
Battleship.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  000007c8  0000085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001b6  008001b6  00000912  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd4  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083f  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049b  00000000  00000000  00001ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049f  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000698  00000000  00000000  00002977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000300f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3b       	cpi	r26, 0xB6	; 182
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 eb       	ldi	r26, 0xB6	; 182
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3b       	cpi	r26, 0xBA	; 186
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  9e:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ShiftPort>:
	t->counter += am;
}

void ResetTimer(struct Timer *t)
{
	t->counter = 0;
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	91 05       	cpc	r25, r1
  aa:	61 f0       	breq	.+24     	; 0xc4 <ShiftPort+0x1e>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	91 05       	cpc	r25, r1
  b0:	81 f0       	breq	.+32     	; 0xd2 <ShiftPort+0x2c>
  b2:	89 2b       	or	r24, r25
  b4:	a1 f4       	brne	.+40     	; 0xde <ShiftPort+0x38>
  b6:	02 c0       	rjmp	.+4      	; 0xbc <ShiftPort+0x16>
  b8:	44 0f       	add	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <ShiftPort+0x12>
  c0:	45 b9       	out	0x05, r20	; 5
  c2:	08 95       	ret
  c4:	02 c0       	rjmp	.+4      	; 0xca <ShiftPort+0x24>
  c6:	44 0f       	add	r20, r20
  c8:	55 1f       	adc	r21, r21
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <ShiftPort+0x20>
  ce:	48 b9       	out	0x08, r20	; 8
  d0:	08 95       	ret
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <ShiftPort+0x32>
  d4:	44 0f       	add	r20, r20
  d6:	55 1f       	adc	r21, r21
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <ShiftPort+0x2e>
  dc:	4b b9       	out	0x0b, r20	; 11
  de:	08 95       	ret

000000e0 <DelayMicro>:
}

void DelayMicro(long t)
{
	while(t > 0)
  e0:	16 16       	cp	r1, r22
  e2:	17 06       	cpc	r1, r23
  e4:	18 06       	cpc	r1, r24
  e6:	19 06       	cpc	r1, r25
  e8:	4c f4       	brge	.+18     	; 0xfc <DelayMicro+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	25 e0       	ldi	r18, 0x05	; 5
  ec:	2a 95       	dec	r18
  ee:	f1 f7       	brne	.-4      	; 0xec <DelayMicro+0xc>
  f0:	00 00       	nop
	{
		_delay_us(1);
		t--;
  f2:	61 50       	subi	r22, 0x01	; 1
  f4:	71 09       	sbc	r23, r1
  f6:	81 09       	sbc	r24, r1
  f8:	91 09       	sbc	r25, r1
	t->counter = 0;
}

void DelayMicro(long t)
{
	while(t > 0)
  fa:	b9 f7       	brne	.-18     	; 0xea <DelayMicro+0xa>
  fc:	08 95       	ret

000000fe <Delay>:
#define MUSIC_H_
#include "CommonFunctions.h"
#include "Pitches.h"
void Delay(long t)
{
	while(t > 0)
  fe:	16 16       	cp	r1, r22
 100:	17 06       	cpc	r1, r23
 102:	18 06       	cpc	r1, r24
 104:	19 06       	cpc	r1, r25
 106:	7c f4       	brge	.+30     	; 0x126 <Delay+0x28>
 108:	e7 ec       	ldi	r30, 0xC7	; 199
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <Delay+0xe>
 110:	00 c0       	rjmp	.+0      	; 0x112 <Delay+0x14>
 112:	00 00       	nop
	{
		_delay_us(50);
		t -= 50;
 114:	62 53       	subi	r22, 0x32	; 50
 116:	71 09       	sbc	r23, r1
 118:	81 09       	sbc	r24, r1
 11a:	91 09       	sbc	r25, r1
#define MUSIC_H_
#include "CommonFunctions.h"
#include "Pitches.h"
void Delay(long t)
{
	while(t > 0)
 11c:	16 16       	cp	r1, r22
 11e:	17 06       	cpc	r1, r23
 120:	18 06       	cpc	r1, r24
 122:	19 06       	cpc	r1, r25
 124:	8c f3       	brlt	.-30     	; 0x108 <Delay+0xa>
 126:	08 95       	ret

00000128 <PlayTone>:
		t -= 50;
	}
}

void PlayTone (int frequencyInHertz, long timeInMilliseconds, enum ALLPORTS port, int regLoc, int tempoOne, int tempoTwo)
{
 128:	2f 92       	push	r2
 12a:	3f 92       	push	r3
 12c:	4f 92       	push	r4
 12e:	5f 92       	push	r5
 130:	6f 92       	push	r6
 132:	7f 92       	push	r7
 134:	8f 92       	push	r8
 136:	9f 92       	push	r9
 138:	af 92       	push	r10
 13a:	bf 92       	push	r11
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	6a 01       	movw	r12, r20
 14e:	7b 01       	movw	r14, r22
 150:	22 2e       	mov	r2, r18
	int x;
	long delayAmount = (long)(1000000/frequencyInHertz);
 152:	9c 01       	movw	r18, r24
 154:	99 0f       	add	r25, r25
 156:	44 0b       	sbc	r20, r20
 158:	55 0b       	sbc	r21, r21
 15a:	60 e4       	ldi	r22, 0x40	; 64
 15c:	72 e4       	ldi	r23, 0x42	; 66
 15e:	8f e0       	ldi	r24, 0x0F	; 15
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 2f 02 	call	0x45e	; 0x45e <__divmodsi4>
 166:	29 01       	movw	r4, r18
 168:	3a 01       	movw	r6, r20
 16a:	49 01       	movw	r8, r18
 16c:	5a 01       	movw	r10, r20
	long loopTime = (long)((timeInMilliseconds*1000)/(delayAmount*2));
 16e:	a8 ee       	ldi	r26, 0xE8	; 232
 170:	b3 e0       	ldi	r27, 0x03	; 3
 172:	a7 01       	movw	r20, r14
 174:	96 01       	movw	r18, r12
 176:	0e 94 4e 02 	call	0x49c	; 0x49c <__muluhisi3>
 17a:	a3 01       	movw	r20, r6
 17c:	92 01       	movw	r18, r4
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	44 1f       	adc	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	0e 94 2f 02 	call	0x45e	; 0x45e <__divmodsi4>
 18a:	29 01       	movw	r4, r18
 18c:	3a 01       	movw	r6, r20

	for (x=0;x<loopTime;x++)
 18e:	12 16       	cp	r1, r18
 190:	13 06       	cpc	r1, r19
 192:	14 06       	cpc	r1, r20
 194:	15 06       	cpc	r1, r21
 196:	0c f0       	brlt	.+2      	; 0x19a <PlayTone+0x72>
 198:	44 c0       	rjmp	.+136    	; 0x222 <PlayTone+0xfa>
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		struct Timer t1;

		
		ShiftPort(port, regLoc, 1);
 19e:	31 2c       	mov	r3, r1
		while(t1.counter < delayAmount)
 1a0:	75 01       	movw	r14, r10
 1a2:	64 01       	movw	r12, r8
	for (x=0;x<loopTime;x++)
	{
		struct Timer t1;

		
		ShiftPort(port, regLoc, 1);
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	b8 01       	movw	r22, r16
 1aa:	c1 01       	movw	r24, r2
 1ac:	0e 94 53 00 	call	0xa6	; 0xa6 <ShiftPort>
		while(t1.counter < delayAmount)
 1b0:	81 14       	cp	r8, r1
 1b2:	91 04       	cpc	r9, r1
 1b4:	a1 04       	cpc	r10, r1
 1b6:	b1 04       	cpc	r11, r1
 1b8:	79 f0       	breq	.+30     	; 0x1d8 <PlayTone+0xb0>
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	dc 01       	movw	r26, r24
 1c0:	2a e1       	ldi	r18, 0x1A	; 26
 1c2:	2a 95       	dec	r18
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <PlayTone+0x9a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <PlayTone+0xa0>
 1c8:	03 96       	adiw	r24, 0x03	; 3
 1ca:	a1 1d       	adc	r26, r1
 1cc:	b1 1d       	adc	r27, r1
 1ce:	8c 15       	cp	r24, r12
 1d0:	9d 05       	cpc	r25, r13
 1d2:	ae 05       	cpc	r26, r14
 1d4:	bf 05       	cpc	r27, r15
 1d6:	a0 f3       	brcs	.-24     	; 0x1c0 <PlayTone+0x98>
		}
		
		ResetTimer(&t1);

		
		ShiftPort(port, regLoc, 0);
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	b8 01       	movw	r22, r16
 1de:	c1 01       	movw	r24, r2
 1e0:	0e 94 53 00 	call	0xa6	; 0xa6 <ShiftPort>
			//Delay(delayAmount);
		while(t1.counter < delayAmount)
 1e4:	c1 14       	cp	r12, r1
 1e6:	d1 04       	cpc	r13, r1
 1e8:	e1 04       	cpc	r14, r1
 1ea:	f1 04       	cpc	r15, r1
 1ec:	79 f0       	breq	.+30     	; 0x20c <PlayTone+0xe4>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	dc 01       	movw	r26, r24
 1f4:	2a e1       	ldi	r18, 0x1A	; 26
 1f6:	2a 95       	dec	r18
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <PlayTone+0xce>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <PlayTone+0xd4>
 1fc:	03 96       	adiw	r24, 0x03	; 3
 1fe:	a1 1d       	adc	r26, r1
 200:	b1 1d       	adc	r27, r1
 202:	8c 15       	cp	r24, r12
 204:	9d 05       	cpc	r25, r13
 206:	ae 05       	cpc	r26, r14
 208:	bf 05       	cpc	r27, r15
 20a:	a0 f3       	brcs	.-24     	; 0x1f4 <PlayTone+0xcc>
{
	int x;
	long delayAmount = (long)(1000000/frequencyInHertz);
	long loopTime = (long)((timeInMilliseconds*1000)/(delayAmount*2));

	for (x=0;x<loopTime;x++)
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	ce 01       	movw	r24, r28
 210:	0d 2e       	mov	r0, r29
 212:	00 0c       	add	r0, r0
 214:	aa 0b       	sbc	r26, r26
 216:	bb 0b       	sbc	r27, r27
 218:	84 15       	cp	r24, r4
 21a:	95 05       	cpc	r25, r5
 21c:	a6 05       	cpc	r26, r6
 21e:	b7 05       	cpc	r27, r7
 220:	0c f2       	brlt	.-126    	; 0x1a4 <PlayTone+0x7c>
		{
			_delay_us(5);
			IncrementTimerX(3, &t1);
		}
	}
	Delay(50000); // a gap between notes
 222:	60 e5       	ldi	r22, 0x50	; 80
 224:	73 ec       	ldi	r23, 0xC3	; 195
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 7f 00 	call	0xfe	; 0xfe <Delay>
	Delay(50000);
 22e:	60 e5       	ldi	r22, 0x50	; 80
 230:	73 ec       	ldi	r23, 0xC3	; 195
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 7f 00 	call	0xfe	; 0xfe <Delay>
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	df 90       	pop	r13
 248:	cf 90       	pop	r12
 24a:	bf 90       	pop	r11
 24c:	af 90       	pop	r10
 24e:	9f 90       	pop	r9
 250:	8f 90       	pop	r8
 252:	7f 90       	pop	r7
 254:	6f 90       	pop	r6
 256:	5f 90       	pop	r5
 258:	4f 90       	pop	r4
 25a:	3f 90       	pop	r3
 25c:	2f 90       	pop	r2
 25e:	08 95       	ret

00000260 <CreateSong>:




void CreateSong(struct Song * s)
{
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	c0 5b       	subi	r28, 0xB0	; 176
 272:	d1 09       	sbc	r29, r1
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
	
	int WWRY[] = {	NOTE_D4, NOTE_E4, NOTE_E4, NOTE_E4, NOTE_E4, NOTE_E4, NOTE_E4, NOTE_E4, NOTE_E4, NOTE_E4, NOTE_E4, NOTE_E4, NOTE_E4,
 27e:	28 e5       	ldi	r18, 0x58	; 88
 280:	e6 e0       	ldi	r30, 0x06	; 6
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	de 01       	movw	r26, r28
 286:	11 96       	adiw	r26, 0x01	; 1
 288:	01 90       	ld	r0, Z+
 28a:	0d 92       	st	X+, r0
 28c:	2a 95       	dec	r18
 28e:	e1 f7       	brne	.-8      	; 0x288 <CreateSong+0x28>
		NOTE_E4, NOTE_E4, NOTE_D4, NOTE_E4, NOTE_D4, NOTE_E4, NOTE_E4, NOTE_E4,
		NOTE_D4, NOTE_D4, NOTE_D4, NOTE_D4, NOTE_D4, NOTE_C4, NOTE_C3, NOTE_C3, NOTE_C2, NOTE_C2, NOTE_C4, NOTE_D4,

	};

	int wwryBeats[] = {	16, 16, 16, 16, 8, 16, 16, 8, 8, 16, 16, 16, 16,
 290:	28 e5       	ldi	r18, 0x58	; 88
 292:	ee e5       	ldi	r30, 0x5E	; 94
 294:	f1 e0       	ldi	r31, 0x01	; 1
 296:	de 01       	movw	r26, r28
 298:	a7 5a       	subi	r26, 0xA7	; 167
 29a:	bf 4f       	sbci	r27, 0xFF	; 255
 29c:	01 90       	ld	r0, Z+
 29e:	0d 92       	st	X+, r0
 2a0:	2a 95       	dec	r18
 2a2:	e1 f7       	brne	.-8      	; 0x29c <CreateSong+0x3c>
		8, 16, 16, 16, 16, 8, 8, 8, 16, 16, 8,
		8, 16, 16, 8, 8, 8, 8, 4,
		16, 16, 8, 8, 16, 8, 16, 16, 8, 8, 16, 16
	};

	for(int i = 0; i < s->length; i++)
 2a4:	fc 01       	movw	r30, r24
 2a6:	20 81       	ld	r18, Z
 2a8:	31 81       	ldd	r19, Z+1	; 0x01
 2aa:	12 16       	cp	r1, r18
 2ac:	13 06       	cpc	r1, r19
 2ae:	4c f5       	brge	.+82     	; 0x302 <CreateSong+0xa2>
 2b0:	be 01       	movw	r22, r28
 2b2:	6f 5f       	subi	r22, 0xFF	; 255
 2b4:	7f 4f       	sbci	r23, 0xFF	; 255
 2b6:	de 01       	movw	r26, r28
 2b8:	a7 5a       	subi	r26, 0xA7	; 167
 2ba:	bf 4f       	sbci	r27, 0xFF	; 255
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	9a 01       	movw	r18, r20
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
	{
		*(s->notes + i) = WWRY[i];
 2c6:	fb 01       	movw	r30, r22
 2c8:	01 91       	ld	r16, Z+
 2ca:	11 91       	ld	r17, Z+
 2cc:	bf 01       	movw	r22, r30
 2ce:	fc 01       	movw	r30, r24
 2d0:	e2 80       	ldd	r14, Z+2	; 0x02
 2d2:	f3 80       	ldd	r15, Z+3	; 0x03
 2d4:	f7 01       	movw	r30, r14
 2d6:	e2 0f       	add	r30, r18
 2d8:	f3 1f       	adc	r31, r19
 2da:	11 83       	std	Z+1, r17	; 0x01
 2dc:	00 83       	st	Z, r16
		*(s->beats + i) = wwryBeats[i];
 2de:	ed 90       	ld	r14, X+
 2e0:	fd 90       	ld	r15, X+
 2e2:	fc 01       	movw	r30, r24
 2e4:	04 81       	ldd	r16, Z+4	; 0x04
 2e6:	15 81       	ldd	r17, Z+5	; 0x05
 2e8:	20 0f       	add	r18, r16
 2ea:	31 1f       	adc	r19, r17
 2ec:	f9 01       	movw	r30, r18
 2ee:	f1 82       	std	Z+1, r15	; 0x01
 2f0:	e0 82       	st	Z, r14
		8, 16, 16, 16, 16, 8, 8, 8, 16, 16, 8,
		8, 16, 16, 8, 8, 8, 8, 4,
		16, 16, 8, 8, 16, 8, 16, 16, 8, 8, 16, 16
	};

	for(int i = 0; i < s->length; i++)
 2f2:	4f 5f       	subi	r20, 0xFF	; 255
 2f4:	5f 4f       	sbci	r21, 0xFF	; 255
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 81       	ld	r18, Z
 2fa:	31 81       	ldd	r19, Z+1	; 0x01
 2fc:	42 17       	cp	r20, r18
 2fe:	53 07       	cpc	r21, r19
 300:	fc f2       	brlt	.-66     	; 0x2c0 <CreateSong+0x60>
	{
		*(s->notes + i) = WWRY[i];
		*(s->beats + i) = wwryBeats[i];
	}
}
 302:	c0 55       	subi	r28, 0x50	; 80
 304:	df 4f       	sbci	r29, 0xFF	; 255
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	de bf       	out	0x3e, r29	; 62
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	cd bf       	out	0x3d, r28	; 61
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	08 95       	ret

0000031e <main>:
#include <stdio.h>
#include "Music.h"


int main(void)
{
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	00 d0       	rcall	.+0      	; 0x324 <main+0x6>
 324:	00 d0       	rcall	.+0      	; 0x326 <main+0x8>
 326:	00 d0       	rcall	.+0      	; 0x328 <main+0xa>
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62

	struct Song s;

	s.length = 44;
 32c:	8c e2       	ldi	r24, 0x2C	; 44
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	9a 83       	std	Y+2, r25	; 0x02
 332:	89 83       	std	Y+1, r24	; 0x01

	s.notes = (int *) calloc(s.length, sizeof(int));
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	0e 94 9e 02 	call	0x53c	; 0x53c <calloc>
 33c:	9c 83       	std	Y+4, r25	; 0x04
 33e:	8b 83       	std	Y+3, r24	; 0x03

	s.beats = (int *) calloc(s.length, sizeof(int));
 340:	62 e0       	ldi	r22, 0x02	; 2
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	8c e2       	ldi	r24, 0x2C	; 44
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 9e 02 	call	0x53c	; 0x53c <calloc>
 34c:	9e 83       	std	Y+6, r25	; 0x06
 34e:	8d 83       	std	Y+5, r24	; 0x05

	CreateSong(&s);
 350:	ce 01       	movw	r24, r28
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	0e 94 30 01 	call	0x260	; 0x260 <CreateSong>

	DDRB = (1 << DDB1);
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	84 b9       	out	0x04, r24	; 4

	for(int i = 0; i < s.length; i++)
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	9a 81       	ldd	r25, Y+2	; 0x02
 360:	18 16       	cp	r1, r24
 362:	19 06       	cpc	r1, r25
 364:	0c f0       	brlt	.+2      	; 0x368 <main+0x4a>
 366:	5e c0       	rjmp	.+188    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 368:	a1 2c       	mov	r10, r1
 36a:	b1 2c       	mov	r11, r1
	{
		int noteDuration = 1000 / s.beats[i];
 36c:	0f 2e       	mov	r0, r31
 36e:	f8 ee       	ldi	r31, 0xE8	; 232
 370:	8f 2e       	mov	r8, r31
 372:	f3 e0       	ldi	r31, 0x03	; 3
 374:	9f 2e       	mov	r9, r31
 376:	f0 2d       	mov	r31, r0
 378:	ed 81       	ldd	r30, Y+5	; 0x05
 37a:	fe 81       	ldd	r31, Y+6	; 0x06
 37c:	95 01       	movw	r18, r10
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	e2 0f       	add	r30, r18
 384:	f3 1f       	adc	r31, r19
 386:	60 81       	ld	r22, Z
 388:	71 81       	ldd	r23, Z+1	; 0x01
 38a:	c4 01       	movw	r24, r8
 38c:	0e 94 1b 02 	call	0x436	; 0x436 <__divmodhi4>
		if(s.notes[i] == 0)
 390:	8b 81       	ldd	r24, Y+3	; 0x03
 392:	9c 81       	ldd	r25, Y+4	; 0x04
 394:	fc 01       	movw	r30, r24
 396:	e2 0f       	add	r30, r18
 398:	f3 1f       	adc	r31, r19
 39a:	80 81       	ld	r24, Z
 39c:	91 81       	ldd	r25, Z+1	; 0x01
 39e:	00 97       	sbiw	r24, 0x00	; 0
 3a0:	39 f4       	brne	.+14     	; 0x3b0 <main+0x92>
		{
			//Delay(noteDuration);
			DelayMicro(noteDuration);
 3a2:	07 2e       	mov	r0, r23
 3a4:	00 0c       	add	r0, r0
 3a6:	88 0b       	sbc	r24, r24
 3a8:	99 0b       	sbc	r25, r25
 3aa:	0e 94 70 00 	call	0xe0	; 0xe0 <DelayMicro>
 3ae:	13 c0       	rjmp	.+38     	; 0x3d6 <main+0xb8>
		}
		else
		{
			PlayTone(s.notes[i], noteDuration, B, DDB1, 5, 3);
 3b0:	ab 01       	movw	r20, r22
 3b2:	77 0f       	add	r23, r23
 3b4:	66 0b       	sbc	r22, r22
 3b6:	77 0b       	sbc	r23, r23
 3b8:	0f 2e       	mov	r0, r31
 3ba:	f3 e0       	ldi	r31, 0x03	; 3
 3bc:	cf 2e       	mov	r12, r31
 3be:	d1 2c       	mov	r13, r1
 3c0:	f0 2d       	mov	r31, r0
 3c2:	0f 2e       	mov	r0, r31
 3c4:	f5 e0       	ldi	r31, 0x05	; 5
 3c6:	ef 2e       	mov	r14, r31
 3c8:	f1 2c       	mov	r15, r1
 3ca:	f0 2d       	mov	r31, r0
 3cc:	01 e0       	ldi	r16, 0x01	; 1
 3ce:	10 e0       	ldi	r17, 0x00	; 0
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	0e 94 94 00 	call	0x128	; 0x128 <PlayTone>

	CreateSong(&s);

	DDRB = (1 << DDB1);

	for(int i = 0; i < s.length; i++)
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	a8 1a       	sub	r10, r24
 3da:	b8 0a       	sbc	r11, r24
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	9a 81       	ldd	r25, Y+2	; 0x02
 3e0:	a8 16       	cp	r10, r24
 3e2:	b9 06       	cpc	r11, r25
 3e4:	4c f2       	brlt	.-110    	; 0x378 <main+0x5a>
			PlayTone(s.notes[i], noteDuration, B, DDB1, 5, 3);
		}
		//Delay(100000);
	}

	for(int i = 0; i < s.length; i++)
 3e6:	18 16       	cp	r1, r24
 3e8:	19 06       	cpc	r1, r25
 3ea:	e4 f4       	brge	.+56     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3ec:	00 e0       	ldi	r16, 0x00	; 0
 3ee:	10 e0       	ldi	r17, 0x00	; 0
 3f0:	58 01       	movw	r10, r16
 3f2:	aa 0c       	add	r10, r10
 3f4:	bb 1c       	adc	r11, r11
	{
		free(s.notes[i]);
 3f6:	eb 81       	ldd	r30, Y+3	; 0x03
 3f8:	fc 81       	ldd	r31, Y+4	; 0x04
 3fa:	ea 0d       	add	r30, r10
 3fc:	fb 1d       	adc	r31, r11
 3fe:	80 81       	ld	r24, Z
 400:	91 81       	ldd	r25, Z+1	; 0x01
 402:	0e 94 52 03 	call	0x6a4	; 0x6a4 <free>
		free(s.beats[i]);
 406:	ed 81       	ldd	r30, Y+5	; 0x05
 408:	fe 81       	ldd	r31, Y+6	; 0x06
 40a:	ea 0d       	add	r30, r10
 40c:	fb 1d       	adc	r31, r11
 40e:	80 81       	ld	r24, Z
 410:	91 81       	ldd	r25, Z+1	; 0x01
 412:	0e 94 52 03 	call	0x6a4	; 0x6a4 <free>
			PlayTone(s.notes[i], noteDuration, B, DDB1, 5, 3);
		}
		//Delay(100000);
	}

	for(int i = 0; i < s.length; i++)
 416:	0f 5f       	subi	r16, 0xFF	; 255
 418:	1f 4f       	sbci	r17, 0xFF	; 255
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	9a 81       	ldd	r25, Y+2	; 0x02
 41e:	08 17       	cp	r16, r24
 420:	19 07       	cpc	r17, r25
 422:	34 f3       	brlt	.-52     	; 0x3f0 <main+0xd2>
	{
		free(s.notes[i]);
		free(s.beats[i]);
	}
	free(s.notes);
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	9c 81       	ldd	r25, Y+4	; 0x04
 428:	0e 94 52 03 	call	0x6a4	; 0x6a4 <free>
	free(s.beats);
 42c:	8d 81       	ldd	r24, Y+5	; 0x05
 42e:	9e 81       	ldd	r25, Y+6	; 0x06
 430:	0e 94 52 03 	call	0x6a4	; 0x6a4 <free>
 434:	ff cf       	rjmp	.-2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>

00000436 <__divmodhi4>:
 436:	97 fb       	bst	r25, 7
 438:	07 2e       	mov	r0, r23
 43a:	16 f4       	brtc	.+4      	; 0x440 <__divmodhi4+0xa>
 43c:	00 94       	com	r0
 43e:	07 d0       	rcall	.+14     	; 0x44e <__divmodhi4_neg1>
 440:	77 fd       	sbrc	r23, 7
 442:	09 d0       	rcall	.+18     	; 0x456 <__divmodhi4_neg2>
 444:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__udivmodhi4>
 448:	07 fc       	sbrc	r0, 7
 44a:	05 d0       	rcall	.+10     	; 0x456 <__divmodhi4_neg2>
 44c:	3e f4       	brtc	.+14     	; 0x45c <__divmodhi4_exit>

0000044e <__divmodhi4_neg1>:
 44e:	90 95       	com	r25
 450:	81 95       	neg	r24
 452:	9f 4f       	sbci	r25, 0xFF	; 255
 454:	08 95       	ret

00000456 <__divmodhi4_neg2>:
 456:	70 95       	com	r23
 458:	61 95       	neg	r22
 45a:	7f 4f       	sbci	r23, 0xFF	; 255

0000045c <__divmodhi4_exit>:
 45c:	08 95       	ret

0000045e <__divmodsi4>:
 45e:	05 2e       	mov	r0, r21
 460:	97 fb       	bst	r25, 7
 462:	1e f4       	brtc	.+6      	; 0x46a <__divmodsi4+0xc>
 464:	00 94       	com	r0
 466:	0e 94 46 02 	call	0x48c	; 0x48c <__negsi2>
 46a:	57 fd       	sbrc	r21, 7
 46c:	07 d0       	rcall	.+14     	; 0x47c <__divmodsi4_neg2>
 46e:	0e 94 6d 02 	call	0x4da	; 0x4da <__udivmodsi4>
 472:	07 fc       	sbrc	r0, 7
 474:	03 d0       	rcall	.+6      	; 0x47c <__divmodsi4_neg2>
 476:	4e f4       	brtc	.+18     	; 0x48a <__divmodsi4_exit>
 478:	0c 94 46 02 	jmp	0x48c	; 0x48c <__negsi2>

0000047c <__divmodsi4_neg2>:
 47c:	50 95       	com	r21
 47e:	40 95       	com	r20
 480:	30 95       	com	r19
 482:	21 95       	neg	r18
 484:	3f 4f       	sbci	r19, 0xFF	; 255
 486:	4f 4f       	sbci	r20, 0xFF	; 255
 488:	5f 4f       	sbci	r21, 0xFF	; 255

0000048a <__divmodsi4_exit>:
 48a:	08 95       	ret

0000048c <__negsi2>:
 48c:	90 95       	com	r25
 48e:	80 95       	com	r24
 490:	70 95       	com	r23
 492:	61 95       	neg	r22
 494:	7f 4f       	sbci	r23, 0xFF	; 255
 496:	8f 4f       	sbci	r24, 0xFF	; 255
 498:	9f 4f       	sbci	r25, 0xFF	; 255
 49a:	08 95       	ret

0000049c <__muluhisi3>:
 49c:	0e 94 8f 02 	call	0x51e	; 0x51e <__umulhisi3>
 4a0:	a5 9f       	mul	r26, r21
 4a2:	90 0d       	add	r25, r0
 4a4:	b4 9f       	mul	r27, r20
 4a6:	90 0d       	add	r25, r0
 4a8:	a4 9f       	mul	r26, r20
 4aa:	80 0d       	add	r24, r0
 4ac:	91 1d       	adc	r25, r1
 4ae:	11 24       	eor	r1, r1
 4b0:	08 95       	ret

000004b2 <__udivmodhi4>:
 4b2:	aa 1b       	sub	r26, r26
 4b4:	bb 1b       	sub	r27, r27
 4b6:	51 e1       	ldi	r21, 0x11	; 17
 4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <__udivmodhi4_ep>

000004ba <__udivmodhi4_loop>:
 4ba:	aa 1f       	adc	r26, r26
 4bc:	bb 1f       	adc	r27, r27
 4be:	a6 17       	cp	r26, r22
 4c0:	b7 07       	cpc	r27, r23
 4c2:	10 f0       	brcs	.+4      	; 0x4c8 <__udivmodhi4_ep>
 4c4:	a6 1b       	sub	r26, r22
 4c6:	b7 0b       	sbc	r27, r23

000004c8 <__udivmodhi4_ep>:
 4c8:	88 1f       	adc	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	5a 95       	dec	r21
 4ce:	a9 f7       	brne	.-22     	; 0x4ba <__udivmodhi4_loop>
 4d0:	80 95       	com	r24
 4d2:	90 95       	com	r25
 4d4:	bc 01       	movw	r22, r24
 4d6:	cd 01       	movw	r24, r26
 4d8:	08 95       	ret

000004da <__udivmodsi4>:
 4da:	a1 e2       	ldi	r26, 0x21	; 33
 4dc:	1a 2e       	mov	r1, r26
 4de:	aa 1b       	sub	r26, r26
 4e0:	bb 1b       	sub	r27, r27
 4e2:	fd 01       	movw	r30, r26
 4e4:	0d c0       	rjmp	.+26     	; 0x500 <__udivmodsi4_ep>

000004e6 <__udivmodsi4_loop>:
 4e6:	aa 1f       	adc	r26, r26
 4e8:	bb 1f       	adc	r27, r27
 4ea:	ee 1f       	adc	r30, r30
 4ec:	ff 1f       	adc	r31, r31
 4ee:	a2 17       	cp	r26, r18
 4f0:	b3 07       	cpc	r27, r19
 4f2:	e4 07       	cpc	r30, r20
 4f4:	f5 07       	cpc	r31, r21
 4f6:	20 f0       	brcs	.+8      	; 0x500 <__udivmodsi4_ep>
 4f8:	a2 1b       	sub	r26, r18
 4fa:	b3 0b       	sbc	r27, r19
 4fc:	e4 0b       	sbc	r30, r20
 4fe:	f5 0b       	sbc	r31, r21

00000500 <__udivmodsi4_ep>:
 500:	66 1f       	adc	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	88 1f       	adc	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	1a 94       	dec	r1
 50a:	69 f7       	brne	.-38     	; 0x4e6 <__udivmodsi4_loop>
 50c:	60 95       	com	r22
 50e:	70 95       	com	r23
 510:	80 95       	com	r24
 512:	90 95       	com	r25
 514:	9b 01       	movw	r18, r22
 516:	ac 01       	movw	r20, r24
 518:	bd 01       	movw	r22, r26
 51a:	cf 01       	movw	r24, r30
 51c:	08 95       	ret

0000051e <__umulhisi3>:
 51e:	a2 9f       	mul	r26, r18
 520:	b0 01       	movw	r22, r0
 522:	b3 9f       	mul	r27, r19
 524:	c0 01       	movw	r24, r0
 526:	a3 9f       	mul	r26, r19
 528:	70 0d       	add	r23, r0
 52a:	81 1d       	adc	r24, r1
 52c:	11 24       	eor	r1, r1
 52e:	91 1d       	adc	r25, r1
 530:	b2 9f       	mul	r27, r18
 532:	70 0d       	add	r23, r0
 534:	81 1d       	adc	r24, r1
 536:	11 24       	eor	r1, r1
 538:	91 1d       	adc	r25, r1
 53a:	08 95       	ret

0000053c <calloc>:
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	86 9f       	mul	r24, r22
 546:	80 01       	movw	r16, r0
 548:	87 9f       	mul	r24, r23
 54a:	10 0d       	add	r17, r0
 54c:	96 9f       	mul	r25, r22
 54e:	10 0d       	add	r17, r0
 550:	11 24       	eor	r1, r1
 552:	c8 01       	movw	r24, r16
 554:	0e 94 ba 02 	call	0x574	; 0x574 <malloc>
 558:	ec 01       	movw	r28, r24
 55a:	00 97       	sbiw	r24, 0x00	; 0
 55c:	29 f0       	breq	.+10     	; 0x568 <calloc+0x2c>
 55e:	a8 01       	movw	r20, r16
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	0e 94 db 03 	call	0x7b6	; 0x7b6 <memset>
 568:	ce 01       	movw	r24, r28
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	08 95       	ret

00000574 <malloc>:
 574:	0f 93       	push	r16
 576:	1f 93       	push	r17
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	82 30       	cpi	r24, 0x02	; 2
 57e:	91 05       	cpc	r25, r1
 580:	10 f4       	brcc	.+4      	; 0x586 <malloc+0x12>
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <__flp>
 58a:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <__flp+0x1>
 58e:	20 e0       	ldi	r18, 0x00	; 0
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	a0 e0       	ldi	r26, 0x00	; 0
 594:	b0 e0       	ldi	r27, 0x00	; 0
 596:	30 97       	sbiw	r30, 0x00	; 0
 598:	19 f1       	breq	.+70     	; 0x5e0 <malloc+0x6c>
 59a:	40 81       	ld	r20, Z
 59c:	51 81       	ldd	r21, Z+1	; 0x01
 59e:	02 81       	ldd	r16, Z+2	; 0x02
 5a0:	13 81       	ldd	r17, Z+3	; 0x03
 5a2:	48 17       	cp	r20, r24
 5a4:	59 07       	cpc	r21, r25
 5a6:	c8 f0       	brcs	.+50     	; 0x5da <malloc+0x66>
 5a8:	84 17       	cp	r24, r20
 5aa:	95 07       	cpc	r25, r21
 5ac:	69 f4       	brne	.+26     	; 0x5c8 <malloc+0x54>
 5ae:	10 97       	sbiw	r26, 0x00	; 0
 5b0:	31 f0       	breq	.+12     	; 0x5be <malloc+0x4a>
 5b2:	12 96       	adiw	r26, 0x02	; 2
 5b4:	0c 93       	st	X, r16
 5b6:	12 97       	sbiw	r26, 0x02	; 2
 5b8:	13 96       	adiw	r26, 0x03	; 3
 5ba:	1c 93       	st	X, r17
 5bc:	27 c0       	rjmp	.+78     	; 0x60c <malloc+0x98>
 5be:	00 93 b8 01 	sts	0x01B8, r16	; 0x8001b8 <__flp>
 5c2:	10 93 b9 01 	sts	0x01B9, r17	; 0x8001b9 <__flp+0x1>
 5c6:	22 c0       	rjmp	.+68     	; 0x60c <malloc+0x98>
 5c8:	21 15       	cp	r18, r1
 5ca:	31 05       	cpc	r19, r1
 5cc:	19 f0       	breq	.+6      	; 0x5d4 <malloc+0x60>
 5ce:	42 17       	cp	r20, r18
 5d0:	53 07       	cpc	r21, r19
 5d2:	18 f4       	brcc	.+6      	; 0x5da <malloc+0x66>
 5d4:	9a 01       	movw	r18, r20
 5d6:	bd 01       	movw	r22, r26
 5d8:	ef 01       	movw	r28, r30
 5da:	df 01       	movw	r26, r30
 5dc:	f8 01       	movw	r30, r16
 5de:	db cf       	rjmp	.-74     	; 0x596 <malloc+0x22>
 5e0:	21 15       	cp	r18, r1
 5e2:	31 05       	cpc	r19, r1
 5e4:	f9 f0       	breq	.+62     	; 0x624 <malloc+0xb0>
 5e6:	28 1b       	sub	r18, r24
 5e8:	39 0b       	sbc	r19, r25
 5ea:	24 30       	cpi	r18, 0x04	; 4
 5ec:	31 05       	cpc	r19, r1
 5ee:	80 f4       	brcc	.+32     	; 0x610 <malloc+0x9c>
 5f0:	8a 81       	ldd	r24, Y+2	; 0x02
 5f2:	9b 81       	ldd	r25, Y+3	; 0x03
 5f4:	61 15       	cp	r22, r1
 5f6:	71 05       	cpc	r23, r1
 5f8:	21 f0       	breq	.+8      	; 0x602 <malloc+0x8e>
 5fa:	fb 01       	movw	r30, r22
 5fc:	93 83       	std	Z+3, r25	; 0x03
 5fe:	82 83       	std	Z+2, r24	; 0x02
 600:	04 c0       	rjmp	.+8      	; 0x60a <malloc+0x96>
 602:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <__flp+0x1>
 606:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <__flp>
 60a:	fe 01       	movw	r30, r28
 60c:	32 96       	adiw	r30, 0x02	; 2
 60e:	44 c0       	rjmp	.+136    	; 0x698 <malloc+0x124>
 610:	fe 01       	movw	r30, r28
 612:	e2 0f       	add	r30, r18
 614:	f3 1f       	adc	r31, r19
 616:	81 93       	st	Z+, r24
 618:	91 93       	st	Z+, r25
 61a:	22 50       	subi	r18, 0x02	; 2
 61c:	31 09       	sbc	r19, r1
 61e:	39 83       	std	Y+1, r19	; 0x01
 620:	28 83       	st	Y, r18
 622:	3a c0       	rjmp	.+116    	; 0x698 <malloc+0x124>
 624:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <__data_end>
 628:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <__data_end+0x1>
 62c:	23 2b       	or	r18, r19
 62e:	41 f4       	brne	.+16     	; 0x640 <malloc+0xcc>
 630:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 634:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 638:	30 93 b7 01 	sts	0x01B7, r19	; 0x8001b7 <__data_end+0x1>
 63c:	20 93 b6 01 	sts	0x01B6, r18	; 0x8001b6 <__data_end>
 640:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 644:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 648:	21 15       	cp	r18, r1
 64a:	31 05       	cpc	r19, r1
 64c:	41 f4       	brne	.+16     	; 0x65e <malloc+0xea>
 64e:	2d b7       	in	r18, 0x3d	; 61
 650:	3e b7       	in	r19, 0x3e	; 62
 652:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 656:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 65a:	24 1b       	sub	r18, r20
 65c:	35 0b       	sbc	r19, r21
 65e:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <__data_end>
 662:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <__data_end+0x1>
 666:	e2 17       	cp	r30, r18
 668:	f3 07       	cpc	r31, r19
 66a:	a0 f4       	brcc	.+40     	; 0x694 <malloc+0x120>
 66c:	2e 1b       	sub	r18, r30
 66e:	3f 0b       	sbc	r19, r31
 670:	28 17       	cp	r18, r24
 672:	39 07       	cpc	r19, r25
 674:	78 f0       	brcs	.+30     	; 0x694 <malloc+0x120>
 676:	ac 01       	movw	r20, r24
 678:	4e 5f       	subi	r20, 0xFE	; 254
 67a:	5f 4f       	sbci	r21, 0xFF	; 255
 67c:	24 17       	cp	r18, r20
 67e:	35 07       	cpc	r19, r21
 680:	48 f0       	brcs	.+18     	; 0x694 <malloc+0x120>
 682:	4e 0f       	add	r20, r30
 684:	5f 1f       	adc	r21, r31
 686:	50 93 b7 01 	sts	0x01B7, r21	; 0x8001b7 <__data_end+0x1>
 68a:	40 93 b6 01 	sts	0x01B6, r20	; 0x8001b6 <__data_end>
 68e:	81 93       	st	Z+, r24
 690:	91 93       	st	Z+, r25
 692:	02 c0       	rjmp	.+4      	; 0x698 <malloc+0x124>
 694:	e0 e0       	ldi	r30, 0x00	; 0
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	cf 01       	movw	r24, r30
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	1f 91       	pop	r17
 6a0:	0f 91       	pop	r16
 6a2:	08 95       	ret

000006a4 <free>:
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	00 97       	sbiw	r24, 0x00	; 0
 6aa:	09 f4       	brne	.+2      	; 0x6ae <free+0xa>
 6ac:	81 c0       	rjmp	.+258    	; 0x7b0 <free+0x10c>
 6ae:	fc 01       	movw	r30, r24
 6b0:	32 97       	sbiw	r30, 0x02	; 2
 6b2:	13 82       	std	Z+3, r1	; 0x03
 6b4:	12 82       	std	Z+2, r1	; 0x02
 6b6:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <__flp>
 6ba:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <__flp+0x1>
 6be:	10 97       	sbiw	r26, 0x00	; 0
 6c0:	81 f4       	brne	.+32     	; 0x6e2 <free+0x3e>
 6c2:	20 81       	ld	r18, Z
 6c4:	31 81       	ldd	r19, Z+1	; 0x01
 6c6:	82 0f       	add	r24, r18
 6c8:	93 1f       	adc	r25, r19
 6ca:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <__data_end>
 6ce:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <__data_end+0x1>
 6d2:	28 17       	cp	r18, r24
 6d4:	39 07       	cpc	r19, r25
 6d6:	51 f5       	brne	.+84     	; 0x72c <free+0x88>
 6d8:	f0 93 b7 01 	sts	0x01B7, r31	; 0x8001b7 <__data_end+0x1>
 6dc:	e0 93 b6 01 	sts	0x01B6, r30	; 0x8001b6 <__data_end>
 6e0:	67 c0       	rjmp	.+206    	; 0x7b0 <free+0x10c>
 6e2:	ed 01       	movw	r28, r26
 6e4:	20 e0       	ldi	r18, 0x00	; 0
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	ce 17       	cp	r28, r30
 6ea:	df 07       	cpc	r29, r31
 6ec:	40 f4       	brcc	.+16     	; 0x6fe <free+0x5a>
 6ee:	4a 81       	ldd	r20, Y+2	; 0x02
 6f0:	5b 81       	ldd	r21, Y+3	; 0x03
 6f2:	9e 01       	movw	r18, r28
 6f4:	41 15       	cp	r20, r1
 6f6:	51 05       	cpc	r21, r1
 6f8:	f1 f0       	breq	.+60     	; 0x736 <free+0x92>
 6fa:	ea 01       	movw	r28, r20
 6fc:	f5 cf       	rjmp	.-22     	; 0x6e8 <free+0x44>
 6fe:	d3 83       	std	Z+3, r29	; 0x03
 700:	c2 83       	std	Z+2, r28	; 0x02
 702:	40 81       	ld	r20, Z
 704:	51 81       	ldd	r21, Z+1	; 0x01
 706:	84 0f       	add	r24, r20
 708:	95 1f       	adc	r25, r21
 70a:	c8 17       	cp	r28, r24
 70c:	d9 07       	cpc	r29, r25
 70e:	59 f4       	brne	.+22     	; 0x726 <free+0x82>
 710:	88 81       	ld	r24, Y
 712:	99 81       	ldd	r25, Y+1	; 0x01
 714:	84 0f       	add	r24, r20
 716:	95 1f       	adc	r25, r21
 718:	02 96       	adiw	r24, 0x02	; 2
 71a:	91 83       	std	Z+1, r25	; 0x01
 71c:	80 83       	st	Z, r24
 71e:	8a 81       	ldd	r24, Y+2	; 0x02
 720:	9b 81       	ldd	r25, Y+3	; 0x03
 722:	93 83       	std	Z+3, r25	; 0x03
 724:	82 83       	std	Z+2, r24	; 0x02
 726:	21 15       	cp	r18, r1
 728:	31 05       	cpc	r19, r1
 72a:	29 f4       	brne	.+10     	; 0x736 <free+0x92>
 72c:	f0 93 b9 01 	sts	0x01B9, r31	; 0x8001b9 <__flp+0x1>
 730:	e0 93 b8 01 	sts	0x01B8, r30	; 0x8001b8 <__flp>
 734:	3d c0       	rjmp	.+122    	; 0x7b0 <free+0x10c>
 736:	e9 01       	movw	r28, r18
 738:	fb 83       	std	Y+3, r31	; 0x03
 73a:	ea 83       	std	Y+2, r30	; 0x02
 73c:	49 91       	ld	r20, Y+
 73e:	59 91       	ld	r21, Y+
 740:	c4 0f       	add	r28, r20
 742:	d5 1f       	adc	r29, r21
 744:	ec 17       	cp	r30, r28
 746:	fd 07       	cpc	r31, r29
 748:	61 f4       	brne	.+24     	; 0x762 <free+0xbe>
 74a:	80 81       	ld	r24, Z
 74c:	91 81       	ldd	r25, Z+1	; 0x01
 74e:	84 0f       	add	r24, r20
 750:	95 1f       	adc	r25, r21
 752:	02 96       	adiw	r24, 0x02	; 2
 754:	e9 01       	movw	r28, r18
 756:	99 83       	std	Y+1, r25	; 0x01
 758:	88 83       	st	Y, r24
 75a:	82 81       	ldd	r24, Z+2	; 0x02
 75c:	93 81       	ldd	r25, Z+3	; 0x03
 75e:	9b 83       	std	Y+3, r25	; 0x03
 760:	8a 83       	std	Y+2, r24	; 0x02
 762:	e0 e0       	ldi	r30, 0x00	; 0
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	12 96       	adiw	r26, 0x02	; 2
 768:	8d 91       	ld	r24, X+
 76a:	9c 91       	ld	r25, X
 76c:	13 97       	sbiw	r26, 0x03	; 3
 76e:	00 97       	sbiw	r24, 0x00	; 0
 770:	19 f0       	breq	.+6      	; 0x778 <free+0xd4>
 772:	fd 01       	movw	r30, r26
 774:	dc 01       	movw	r26, r24
 776:	f7 cf       	rjmp	.-18     	; 0x766 <free+0xc2>
 778:	8d 91       	ld	r24, X+
 77a:	9c 91       	ld	r25, X
 77c:	11 97       	sbiw	r26, 0x01	; 1
 77e:	9d 01       	movw	r18, r26
 780:	2e 5f       	subi	r18, 0xFE	; 254
 782:	3f 4f       	sbci	r19, 0xFF	; 255
 784:	82 0f       	add	r24, r18
 786:	93 1f       	adc	r25, r19
 788:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <__data_end>
 78c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <__data_end+0x1>
 790:	28 17       	cp	r18, r24
 792:	39 07       	cpc	r19, r25
 794:	69 f4       	brne	.+26     	; 0x7b0 <free+0x10c>
 796:	30 97       	sbiw	r30, 0x00	; 0
 798:	29 f4       	brne	.+10     	; 0x7a4 <free+0x100>
 79a:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <__flp+0x1>
 79e:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <__flp>
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <free+0x104>
 7a4:	13 82       	std	Z+3, r1	; 0x03
 7a6:	12 82       	std	Z+2, r1	; 0x02
 7a8:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <__data_end+0x1>
 7ac:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <__data_end>
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

000007b6 <memset>:
 7b6:	dc 01       	movw	r26, r24
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <memset+0x6>
 7ba:	6d 93       	st	X+, r22
 7bc:	41 50       	subi	r20, 0x01	; 1
 7be:	50 40       	sbci	r21, 0x00	; 0
 7c0:	e0 f7       	brcc	.-8      	; 0x7ba <memset+0x4>
 7c2:	08 95       	ret

000007c4 <_exit>:
 7c4:	f8 94       	cli

000007c6 <__stop_program>:
 7c6:	ff cf       	rjmp	.-2      	; 0x7c6 <__stop_program>
