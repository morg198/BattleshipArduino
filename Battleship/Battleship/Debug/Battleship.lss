
Battleship.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  00800100  00800100  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001765  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098e  00000000  00000000  00001b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab1  00000000  00000000  000024fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00002fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000721  00000000  00000000  000033b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000155c  00000000  00000000  00003ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 36       	cpi	r26, 0x66	; 102
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  9e:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitializeRegister>:
    {
        longToPush += temp[i] * pow(2, i);
    }

    return longToPush;
}
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	08 95       	ret

000000ae <PulseClock>:
  ae:	2a 9a       	sbi	0x05, 2	; 5
  b0:	2a 98       	cbi	0x05, 2	; 5
  b2:	08 95       	ret

000000b4 <LatchIn>:
  b4:	29 9a       	sbi	0x05, 1	; 5
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	98 2f       	mov	r25, r24
  ba:	9a 95       	dec	r25
  bc:	f1 f7       	brne	.-4      	; 0xba <LatchIn+0x6>
  be:	29 98       	cbi	0x05, 1	; 5
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LatchIn+0xc>
  c4:	08 95       	ret

000000c6 <TestWrite>:
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	8c 01       	movw	r16, r24
  d0:	c0 e0       	ldi	r28, 0x00	; 0
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	cc 30       	cpi	r28, 0x0C	; 12
  d6:	d1 05       	cpc	r29, r1
  d8:	4c f4       	brge	.+18     	; 0xec <TestWrite+0x26>
  da:	f8 01       	movw	r30, r16
  dc:	80 81       	ld	r24, Z
  de:	91 81       	ldd	r25, Z+1	; 0x01
  e0:	89 2b       	or	r24, r25
  e2:	11 f4       	brne	.+4      	; 0xe8 <TestWrite+0x22>
  e4:	28 9a       	sbi	0x05, 0	; 5
  e6:	03 c0       	rjmp	.+6      	; 0xee <TestWrite+0x28>
  e8:	28 98       	cbi	0x05, 0	; 5
  ea:	01 c0       	rjmp	.+2      	; 0xee <TestWrite+0x28>
  ec:	28 98       	cbi	0x05, 0	; 5
  ee:	0e 94 57 00 	call	0xae	; 0xae <PulseClock>
  f2:	21 96       	adiw	r28, 0x01	; 1
  f4:	0e 5f       	subi	r16, 0xFE	; 254
  f6:	1f 4f       	sbci	r17, 0xFF	; 255
  f8:	c0 31       	cpi	r28, 0x10	; 16
  fa:	d1 05       	cpc	r29, r1
  fc:	59 f7       	brne	.-42     	; 0xd4 <TestWrite+0xe>
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	0f 91       	pop	r16
 106:	08 95       	ret

00000108 <GetNumArray>:
 #include "arraytolong.h"

 //short numArr[GRIDLENGTH][GRIDHEIGHT];
 short numArr[GRIDLENGTH * GRIDHEIGHT * 3];
 unsigned short * GetNumArray(struct LedPin pins[2][2])
 {
 108:	dc 01       	movw	r26, r24
	{
		for(int j = 0; j < GRIDHEIGHT / 3; j++)
		{
			for(int k = 0; k < 3; k++)
			{
				numArr[a] = pins[i][j].values[k];
 10a:	ee e1       	ldi	r30, 0x1E	; 30
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	8d 91       	ld	r24, X+
 110:	9c 91       	ld	r25, X
 112:	11 97       	sbiw	r26, 0x01	; 1
 114:	91 83       	std	Z+1, r25	; 0x01
 116:	80 83       	st	Z, r24
 118:	12 96       	adiw	r26, 0x02	; 2
 11a:	8d 91       	ld	r24, X+
 11c:	9c 91       	ld	r25, X
 11e:	13 97       	sbiw	r26, 0x03	; 3
 120:	93 83       	std	Z+3, r25	; 0x03
 122:	82 83       	std	Z+2, r24	; 0x02
 124:	14 96       	adiw	r26, 0x04	; 4
 126:	8d 91       	ld	r24, X+
 128:	9c 91       	ld	r25, X
 12a:	15 97       	sbiw	r26, 0x05	; 5
 12c:	95 83       	std	Z+5, r25	; 0x05
 12e:	84 83       	std	Z+4, r24	; 0x04
 130:	16 96       	adiw	r26, 0x06	; 6
 132:	8d 91       	ld	r24, X+
 134:	9c 91       	ld	r25, X
 136:	17 97       	sbiw	r26, 0x07	; 7
 138:	97 83       	std	Z+7, r25	; 0x07
 13a:	86 83       	std	Z+6, r24	; 0x06
 13c:	18 96       	adiw	r26, 0x08	; 8
 13e:	8d 91       	ld	r24, X+
 140:	9c 91       	ld	r25, X
 142:	19 97       	sbiw	r26, 0x09	; 9
 144:	91 87       	std	Z+9, r25	; 0x09
 146:	80 87       	std	Z+8, r24	; 0x08
 148:	1a 96       	adiw	r26, 0x0a	; 10
 14a:	8d 91       	ld	r24, X+
 14c:	9c 91       	ld	r25, X
 14e:	1b 97       	sbiw	r26, 0x0b	; 11
 150:	93 87       	std	Z+11, r25	; 0x0b
 152:	82 87       	std	Z+10, r24	; 0x0a
 154:	1c 96       	adiw	r26, 0x0c	; 12
 156:	8d 91       	ld	r24, X+
 158:	9c 91       	ld	r25, X
 15a:	1d 97       	sbiw	r26, 0x0d	; 13
 15c:	95 87       	std	Z+13, r25	; 0x0d
 15e:	84 87       	std	Z+12, r24	; 0x0c
 160:	1e 96       	adiw	r26, 0x0e	; 14
 162:	8d 91       	ld	r24, X+
 164:	9c 91       	ld	r25, X
 166:	1f 97       	sbiw	r26, 0x0f	; 15
 168:	97 87       	std	Z+15, r25	; 0x0f
 16a:	86 87       	std	Z+14, r24	; 0x0e
 16c:	50 96       	adiw	r26, 0x10	; 16
 16e:	8d 91       	ld	r24, X+
 170:	9c 91       	ld	r25, X
 172:	51 97       	sbiw	r26, 0x11	; 17
 174:	91 8b       	std	Z+17, r25	; 0x11
 176:	80 8b       	std	Z+16, r24	; 0x10
 178:	52 96       	adiw	r26, 0x12	; 18
 17a:	8d 91       	ld	r24, X+
 17c:	9c 91       	ld	r25, X
 17e:	53 97       	sbiw	r26, 0x13	; 19
 180:	93 8b       	std	Z+19, r25	; 0x13
 182:	82 8b       	std	Z+18, r24	; 0x12
 184:	54 96       	adiw	r26, 0x14	; 20
 186:	8d 91       	ld	r24, X+
 188:	9c 91       	ld	r25, X
 18a:	55 97       	sbiw	r26, 0x15	; 21
 18c:	95 8b       	std	Z+21, r25	; 0x15
 18e:	84 8b       	std	Z+20, r24	; 0x14
 190:	56 96       	adiw	r26, 0x16	; 22
 192:	8d 91       	ld	r24, X+
 194:	9c 91       	ld	r25, X
 196:	57 97       	sbiw	r26, 0x17	; 23
 198:	97 8b       	std	Z+23, r25	; 0x17
 19a:	86 8b       	std	Z+22, r24	; 0x16
				a++;
			}
		}
	}
	return numArr;
 }
 19c:	cf 01       	movw	r24, r30
 19e:	08 95       	ret

000001a0 <main>:

int gameMode = MAIN_MENU;

int main(void)
{
	InitializeRegister();
 1a0:	0e 94 53 00 	call	0xa6	; 0xa6 <InitializeRegister>
/*			to the pin struct, and the digital rgb values				*/
/************************************************************************/
void SetColor(struct LedPin*  lightPin, int r, int g, int b)
{
//	_delay_ms(2);													//Delay 2 ms to show the color
	lightPin->values[RED] = r;
 1a4:	e6 e0       	ldi	r30, 0x06	; 6
 1a6:	f1 e0       	ldi	r31, 0x01	; 1
 1a8:	11 82       	std	Z+1, r1	; 0x01
 1aa:	10 82       	st	Z, r1
	lightPin->values[GREEN] = g;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	93 83       	std	Z+3, r25	; 0x03
 1b2:	82 83       	std	Z+2, r24	; 0x02
	lightPin->values[BLUE] = b;
 1b4:	95 83       	std	Z+5, r25	; 0x05
 1b6:	84 83       	std	Z+4, r24	; 0x04
/*			to the pin struct, and the digital rgb values				*/
/************************************************************************/
void SetColor(struct LedPin*  lightPin, int r, int g, int b)
{
//	_delay_ms(2);													//Delay 2 ms to show the color
	lightPin->values[RED] = r;
 1b8:	97 83       	std	Z+7, r25	; 0x07
 1ba:	86 83       	std	Z+6, r24	; 0x06
	lightPin->values[GREEN] = g;
 1bc:	11 86       	std	Z+9, r1	; 0x09
 1be:	10 86       	std	Z+8, r1	; 0x08
	lightPin->values[BLUE] = b;
 1c0:	93 87       	std	Z+11, r25	; 0x0b
 1c2:	82 87       	std	Z+10, r24	; 0x0a
/*			to the pin struct, and the digital rgb values				*/
/************************************************************************/
void SetColor(struct LedPin*  lightPin, int r, int g, int b)
{
//	_delay_ms(2);													//Delay 2 ms to show the color
	lightPin->values[RED] = r;
 1c4:	95 87       	std	Z+13, r25	; 0x0d
 1c6:	84 87       	std	Z+12, r24	; 0x0c
	lightPin->values[GREEN] = g;
 1c8:	97 87       	std	Z+15, r25	; 0x0f
 1ca:	86 87       	std	Z+14, r24	; 0x0e
	lightPin->values[BLUE] = b;
 1cc:	11 8a       	std	Z+17, r1	; 0x11
 1ce:	10 8a       	std	Z+16, r1	; 0x10
/*			to the pin struct, and the digital rgb values				*/
/************************************************************************/
void SetColor(struct LedPin*  lightPin, int r, int g, int b)
{
//	_delay_ms(2);													//Delay 2 ms to show the color
	lightPin->values[RED] = r;
 1d0:	13 8a       	std	Z+19, r1	; 0x13
 1d2:	12 8a       	std	Z+18, r1	; 0x12
	lightPin->values[GREEN] = g;
 1d4:	95 8b       	std	Z+21, r25	; 0x15
 1d6:	84 8b       	std	Z+20, r24	; 0x14
	lightPin->values[BLUE] = b;
 1d8:	17 8a       	std	Z+23, r1	; 0x17
 1da:	16 8a       	std	Z+22, r1	; 0x16


	while(1)
	{		

			TestWrite(GetNumArray(lights));
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	0e 94 84 00 	call	0x108	; 0x108 <GetNumArray>
 1e4:	0e 94 63 00 	call	0xc6	; 0xc6 <TestWrite>
			//TestWrite(test);
			LatchIn();
 1e8:	0e 94 5a 00 	call	0xb4	; 0xb4 <LatchIn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	81 ee       	ldi	r24, 0xE1	; 225
 1f0:	94 e0       	ldi	r25, 0x04	; 4
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x52>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x5c>
 1fc:	00 00       	nop
 1fe:	ee cf       	rjmp	.-36     	; 0x1dc <main+0x3c>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
