
Battleship.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000de5  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000833  00000000  00000000  000011d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050d  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00001f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e4  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000062c  00000000  00000000  00002564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  78:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <JoyStickUp>:
	}
}

void DelayMicro(long t)
{
	while(t > 0)
  80:	96 b1       	in	r25, 0x06	; 6
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	89 27       	eor	r24, r25
  86:	81 70       	andi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	08 95       	ret

0000008c <JoyStickLeft>:
  8c:	86 b1       	in	r24, 0x06	; 6
  8e:	86 95       	lsr	r24
  90:	91 e0       	ldi	r25, 0x01	; 1
  92:	89 27       	eor	r24, r25
  94:	81 70       	andi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	08 95       	ret

0000009a <JoyStickDown>:
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	86 95       	lsr	r24
  9e:	86 95       	lsr	r24
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	89 27       	eor	r24, r25
  a4:	81 70       	andi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 95       	ret

000000aa <JoyStickRight>:
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	86 95       	lsr	r24
  ae:	86 95       	lsr	r24
  b0:	86 95       	lsr	r24
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	89 27       	eor	r24, r25
  b6:	81 70       	andi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <JoyStickPress>:
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	82 95       	swap	r24
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	89 27       	eor	r24, r25
  c6:	81 70       	andi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	08 95       	ret

000000cc <ClearPin>:
  cc:	fc 01       	movw	r30, r24
  ce:	9c 01       	movw	r18, r24
  d0:	2a 5f       	subi	r18, 0xFA	; 250
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	81 91       	ld	r24, Z+
  d6:	91 91       	ld	r25, Z+
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	91 05       	cpc	r25, r1
  dc:	41 f0       	breq	.+16     	; 0xee <ClearPin+0x22>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	91 05       	cpc	r25, r1
  e2:	41 f0       	breq	.+16     	; 0xf4 <ClearPin+0x28>
  e4:	89 2b       	or	r24, r25
  e6:	41 f4       	brne	.+16     	; 0xf8 <ClearPin+0x2c>
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	15 b8       	out	0x05, r1	; 5
  ec:	05 c0       	rjmp	.+10     	; 0xf8 <ClearPin+0x2c>
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	18 b8       	out	0x08, r1	; 8
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <ClearPin+0x2c>
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	1b b8       	out	0x0b, r1	; 11
  f8:	e2 17       	cp	r30, r18
  fa:	f3 07       	cpc	r31, r19
  fc:	59 f7       	brne	.-42     	; 0xd4 <ClearPin+0x8>
  fe:	08 95       	ret

00000100 <ShiftPort>:
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	91 05       	cpc	r25, r1
 104:	71 f0       	breq	.+28     	; 0x122 <ShiftPort+0x22>
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	91 05       	cpc	r25, r1
 10a:	a1 f0       	breq	.+40     	; 0x134 <ShiftPort+0x34>
 10c:	89 2b       	or	r24, r25
 10e:	d1 f4       	brne	.+52     	; 0x144 <ShiftPort+0x44>
 110:	85 b1       	in	r24, 0x05	; 5
 112:	02 c0       	rjmp	.+4      	; 0x118 <ShiftPort+0x18>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <ShiftPort+0x14>
 11c:	48 2b       	or	r20, r24
 11e:	45 b9       	out	0x05, r20	; 5
 120:	08 95       	ret
 122:	88 b1       	in	r24, 0x08	; 8
 124:	02 c0       	rjmp	.+4      	; 0x12a <ShiftPort+0x2a>
 126:	44 0f       	add	r20, r20
 128:	55 1f       	adc	r21, r21
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <ShiftPort+0x26>
 12e:	48 2b       	or	r20, r24
 130:	48 b9       	out	0x08, r20	; 8
 132:	08 95       	ret
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	02 c0       	rjmp	.+4      	; 0x13c <ShiftPort+0x3c>
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <ShiftPort+0x38>
 140:	48 2b       	or	r20, r24
 142:	4b b9       	out	0x0b, r20	; 11
 144:	08 95       	ret

00000146 <SetColor>:
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
 158:	6b 01       	movw	r12, r22
 15a:	7a 01       	movw	r14, r20
 15c:	89 01       	movw	r16, r18
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9f e1       	ldi	r25, 0x1F	; 31
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <SetColor+0x1c>
 166:	00 c0       	rjmp	.+0      	; 0x168 <SetColor+0x22>
 168:	00 00       	nop
 16a:	ce 01       	movw	r24, r28
 16c:	0e 94 66 00 	call	0xcc	; 0xcc <ClearPin>
 170:	6e 81       	ldd	r22, Y+6	; 0x06
 172:	7f 81       	ldd	r23, Y+7	; 0x07
 174:	a6 01       	movw	r20, r12
 176:	88 81       	ld	r24, Y
 178:	99 81       	ldd	r25, Y+1	; 0x01
 17a:	0e 94 80 00 	call	0x100	; 0x100 <ShiftPort>
 17e:	68 85       	ldd	r22, Y+8	; 0x08
 180:	79 85       	ldd	r23, Y+9	; 0x09
 182:	a7 01       	movw	r20, r14
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	9b 81       	ldd	r25, Y+3	; 0x03
 188:	0e 94 80 00 	call	0x100	; 0x100 <ShiftPort>
 18c:	6a 85       	ldd	r22, Y+10	; 0x0a
 18e:	7b 85       	ldd	r23, Y+11	; 0x0b
 190:	a8 01       	movw	r20, r16
 192:	8c 81       	ldd	r24, Y+4	; 0x04
 194:	9d 81       	ldd	r25, Y+5	; 0x05
 196:	0e 94 80 00 	call	0x100	; 0x100 <ShiftPort>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	08 95       	ret

000001ac <main>:




int main(void)
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	2c 97       	sbiw	r28, 0x0c	; 12
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
	DDRB = (1 << DDB1) | (1 << DDB2) | (1 << DDB3); //Sets the rgb pins to output
 1c0:	8e e0       	ldi	r24, 0x0E	; 14
 1c2:	84 b9       	out	0x04, r24	; 4
/*				ports and register locations, takes a pointer to the	*/
/*				struct then all the needed values						*/
/************************************************************************/
void InitializeLed(struct LedPin * pin, int port1, int port2, int port3, int regLoc1, int regLoc2, int regLoc3)
{
	pin->ports[0] = port1;
 1c4:	1a 82       	std	Y+2, r1	; 0x02
 1c6:	19 82       	std	Y+1, r1	; 0x01
	pin->ports[1] = port2;
 1c8:	1c 82       	std	Y+4, r1	; 0x04
 1ca:	1b 82       	std	Y+3, r1	; 0x03
	pin->ports[2] = port3;
 1cc:	1e 82       	std	Y+6, r1	; 0x06
 1ce:	1d 82       	std	Y+5, r1	; 0x05

	pin->regLocs[0] = regLoc1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	98 87       	std	Y+8, r25	; 0x08
 1d6:	8f 83       	std	Y+7, r24	; 0x07
	pin->regLocs[1] = regLoc2;
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	9a 87       	std	Y+10, r25	; 0x0a
 1de:	89 87       	std	Y+9, r24	; 0x09
	pin->regLocs[2] = regLoc3;
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	9c 87       	std	Y+12, r25	; 0x0c
 1e6:	8b 87       	std	Y+11, r24	; 0x0b

	struct LedPin rgbPin;

	InitializeLed(&rgbPin, B, B, B, DDB1, DDB2, DDB3);				//Initializes the rgb "pin" to hold the ports and registers of each node it is made of

	DDRC &= ( (0 << DDC0) | (0 << DDC1) | (0 << DDC2) | (0 << DDC3) | (0 << DDC4));		//Sets up the analog inputs to be read digitally as inputs
 1e8:	87 b1       	in	r24, 0x07	; 7
 1ea:	17 b8       	out	0x07, r1	; 7

    /* Replace with your application code */
    while (1) 
    {

		if(JoyStickUp())
 1ec:	0e 94 40 00 	call	0x80	; 0x80 <JoyStickUp>
 1f0:	89 2b       	or	r24, r25
 1f2:	59 f0       	breq	.+22     	; 0x20a <main+0x5e>
		{
			SetColor(&rgbPin, 1, 0, 1);								//Sets pin to be green
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	ce 01       	movw	r24, r28
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	0e 94 a3 00 	call	0x146	; 0x146 <SetColor>
 208:	f1 cf       	rjmp	.-30     	; 0x1ec <main+0x40>
		}
		else if(JoyStickLeft())
 20a:	0e 94 46 00 	call	0x8c	; 0x8c <JoyStickLeft>
 20e:	89 2b       	or	r24, r25
 210:	59 f0       	breq	.+22     	; 0x228 <main+0x7c>
		{
			SetColor(&rgbPin, 0, 1, 1);								//Sets pin to be red
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	41 e0       	ldi	r20, 0x01	; 1
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	ce 01       	movw	r24, r28
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	0e 94 a3 00 	call	0x146	; 0x146 <SetColor>
 226:	e2 cf       	rjmp	.-60     	; 0x1ec <main+0x40>
		}
		else if(JoyStickDown())
 228:	0e 94 4d 00 	call	0x9a	; 0x9a <JoyStickDown>
 22c:	89 2b       	or	r24, r25
 22e:	59 f0       	breq	.+22     	; 0x246 <main+0x9a>
		{
			SetColor(&rgbPin, 1, 1, 0);								//Sets pin to be blue
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	ce 01       	movw	r24, r28
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	0e 94 a3 00 	call	0x146	; 0x146 <SetColor>
 244:	d3 cf       	rjmp	.-90     	; 0x1ec <main+0x40>
		}
		else if(JoyStickRight())
 246:	0e 94 55 00 	call	0xaa	; 0xaa <JoyStickRight>
 24a:	89 2b       	or	r24, r25
 24c:	59 f0       	breq	.+22     	; 0x264 <main+0xb8>
		{
			SetColor(&rgbPin, 0, 0, 1);								//Sets pin to be yellow
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	ce 01       	movw	r24, r28
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	0e 94 a3 00 	call	0x146	; 0x146 <SetColor>
 262:	c4 cf       	rjmp	.-120    	; 0x1ec <main+0x40>
		}
		else if(JoyStickPress())
 264:	0e 94 5e 00 	call	0xbc	; 0xbc <JoyStickPress>
 268:	89 2b       	or	r24, r25
 26a:	59 f0       	breq	.+22     	; 0x282 <main+0xd6>
		{
			SetColor(&rgbPin, 0, 1, 0);								//Sets pin to be magenta
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	ce 01       	movw	r24, r28
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	0e 94 a3 00 	call	0x146	; 0x146 <SetColor>
 280:	b5 cf       	rjmp	.-150    	; 0x1ec <main+0x40>
		}
		else
		{
			SetColor(&rgbPin, 0, 0, 0);		//Sets pin to be white
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	ce 01       	movw	r24, r28
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	0e 94 a3 00 	call	0x146	; 0x146 <SetColor>
 296:	aa cf       	rjmp	.-172    	; 0x1ec <main+0x40>

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
