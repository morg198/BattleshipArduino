
Battleship.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000324  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e80  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000878  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000578  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00002114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000525  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000691  00000000  00000000  000027bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002e4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  8e:	0c 94 90 01 	jmp	0x320	; 0x320 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <JoyStickUp>:
	}
}

void DelayMicro(long t)
{
	while(t > 0)
  96:	96 b1       	in	r25, 0x06	; 6
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	89 27       	eor	r24, r25
  9c:	81 70       	andi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	08 95       	ret

000000a2 <JoyStickLeft>:
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	86 95       	lsr	r24
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	89 27       	eor	r24, r25
  aa:	81 70       	andi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	08 95       	ret

000000b0 <JoyStickDown>:
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	86 95       	lsr	r24
  b4:	86 95       	lsr	r24
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	89 27       	eor	r24, r25
  ba:	81 70       	andi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	08 95       	ret

000000c0 <JoyStickRight>:
  c0:	86 b1       	in	r24, 0x06	; 6
  c2:	86 95       	lsr	r24
  c4:	86 95       	lsr	r24
  c6:	86 95       	lsr	r24
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	89 27       	eor	r24, r25
  cc:	81 70       	andi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 95       	ret

000000d2 <JoyStickPress>:
  d2:	86 b1       	in	r24, 0x06	; 6
  d4:	82 95       	swap	r24
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	89 27       	eor	r24, r25
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret

000000e2 <ReadJoystickState>:
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
  e8:	0e 94 4b 00 	call	0x96	; 0x96 <JoyStickUp>
  ec:	89 2b       	or	r24, r25
  ee:	19 f0       	breq	.+6      	; 0xf6 <ReadJoystickState+0x14>
  f0:	19 82       	std	Y+1, r1	; 0x01
  f2:	18 82       	st	Y, r1
  f4:	28 c0       	rjmp	.+80     	; 0x146 <ReadJoystickState+0x64>
  f6:	0e 94 51 00 	call	0xa2	; 0xa2 <JoyStickLeft>
  fa:	89 2b       	or	r24, r25
  fc:	29 f0       	breq	.+10     	; 0x108 <ReadJoystickState+0x26>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	99 83       	std	Y+1, r25	; 0x01
 104:	88 83       	st	Y, r24
 106:	1f c0       	rjmp	.+62     	; 0x146 <ReadJoystickState+0x64>
 108:	0e 94 58 00 	call	0xb0	; 0xb0 <JoyStickDown>
 10c:	89 2b       	or	r24, r25
 10e:	29 f0       	breq	.+10     	; 0x11a <ReadJoystickState+0x38>
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	99 83       	std	Y+1, r25	; 0x01
 116:	88 83       	st	Y, r24
 118:	16 c0       	rjmp	.+44     	; 0x146 <ReadJoystickState+0x64>
 11a:	0e 94 60 00 	call	0xc0	; 0xc0 <JoyStickRight>
 11e:	89 2b       	or	r24, r25
 120:	29 f0       	breq	.+10     	; 0x12c <ReadJoystickState+0x4a>
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	99 83       	std	Y+1, r25	; 0x01
 128:	88 83       	st	Y, r24
 12a:	0d c0       	rjmp	.+26     	; 0x146 <ReadJoystickState+0x64>
 12c:	0e 94 69 00 	call	0xd2	; 0xd2 <JoyStickPress>
 130:	89 2b       	or	r24, r25
 132:	29 f0       	breq	.+10     	; 0x13e <ReadJoystickState+0x5c>
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	99 83       	std	Y+1, r25	; 0x01
 13a:	88 83       	st	Y, r24
 13c:	04 c0       	rjmp	.+8      	; 0x146 <ReadJoystickState+0x64>
 13e:	85 e0       	ldi	r24, 0x05	; 5
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	99 83       	std	Y+1, r25	; 0x01
 144:	88 83       	st	Y, r24
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <ClearPin>:
 14c:	fc 01       	movw	r30, r24
 14e:	9c 01       	movw	r18, r24
 150:	2a 5f       	subi	r18, 0xFA	; 250
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	81 91       	ld	r24, Z+
 156:	91 91       	ld	r25, Z+
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	91 05       	cpc	r25, r1
 15c:	41 f0       	breq	.+16     	; 0x16e <ClearPin+0x22>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	91 05       	cpc	r25, r1
 162:	41 f0       	breq	.+16     	; 0x174 <ClearPin+0x28>
 164:	89 2b       	or	r24, r25
 166:	41 f4       	brne	.+16     	; 0x178 <ClearPin+0x2c>
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	15 b8       	out	0x05, r1	; 5
 16c:	05 c0       	rjmp	.+10     	; 0x178 <ClearPin+0x2c>
 16e:	88 b1       	in	r24, 0x08	; 8
 170:	18 b8       	out	0x08, r1	; 8
 172:	02 c0       	rjmp	.+4      	; 0x178 <ClearPin+0x2c>
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	1b b8       	out	0x0b, r1	; 11
 178:	e2 17       	cp	r30, r18
 17a:	f3 07       	cpc	r31, r19
 17c:	59 f7       	brne	.-42     	; 0x154 <ClearPin+0x8>
 17e:	08 95       	ret

00000180 <ShiftPort>:
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	91 05       	cpc	r25, r1
 184:	71 f0       	breq	.+28     	; 0x1a2 <ShiftPort+0x22>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	91 05       	cpc	r25, r1
 18a:	a1 f0       	breq	.+40     	; 0x1b4 <ShiftPort+0x34>
 18c:	89 2b       	or	r24, r25
 18e:	d1 f4       	brne	.+52     	; 0x1c4 <ShiftPort+0x44>
 190:	85 b1       	in	r24, 0x05	; 5
 192:	02 c0       	rjmp	.+4      	; 0x198 <ShiftPort+0x18>
 194:	44 0f       	add	r20, r20
 196:	55 1f       	adc	r21, r21
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <ShiftPort+0x14>
 19c:	48 2b       	or	r20, r24
 19e:	45 b9       	out	0x05, r20	; 5
 1a0:	08 95       	ret
 1a2:	88 b1       	in	r24, 0x08	; 8
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <ShiftPort+0x2a>
 1a6:	44 0f       	add	r20, r20
 1a8:	55 1f       	adc	r21, r21
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <ShiftPort+0x26>
 1ae:	48 2b       	or	r20, r24
 1b0:	48 b9       	out	0x08, r20	; 8
 1b2:	08 95       	ret
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <ShiftPort+0x3c>
 1b8:	44 0f       	add	r20, r20
 1ba:	55 1f       	adc	r21, r21
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <ShiftPort+0x38>
 1c0:	48 2b       	or	r20, r24
 1c2:	4b b9       	out	0x0b, r20	; 11
 1c4:	08 95       	ret

000001c6 <SetColor>:
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
 1d8:	6b 01       	movw	r12, r22
 1da:	7a 01       	movw	r14, r20
 1dc:	89 01       	movw	r16, r18
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	9f e1       	ldi	r25, 0x1F	; 31
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <SetColor+0x1c>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <SetColor+0x22>
 1e8:	00 00       	nop
 1ea:	ce 01       	movw	r24, r28
 1ec:	0e 94 a6 00 	call	0x14c	; 0x14c <ClearPin>
 1f0:	6e 81       	ldd	r22, Y+6	; 0x06
 1f2:	7f 81       	ldd	r23, Y+7	; 0x07
 1f4:	a6 01       	movw	r20, r12
 1f6:	88 81       	ld	r24, Y
 1f8:	99 81       	ldd	r25, Y+1	; 0x01
 1fa:	0e 94 c0 00 	call	0x180	; 0x180 <ShiftPort>
 1fe:	68 85       	ldd	r22, Y+8	; 0x08
 200:	79 85       	ldd	r23, Y+9	; 0x09
 202:	a7 01       	movw	r20, r14
 204:	8a 81       	ldd	r24, Y+2	; 0x02
 206:	9b 81       	ldd	r25, Y+3	; 0x03
 208:	0e 94 c0 00 	call	0x180	; 0x180 <ShiftPort>
 20c:	6a 85       	ldd	r22, Y+10	; 0x0a
 20e:	7b 85       	ldd	r23, Y+11	; 0x0b
 210:	a8 01       	movw	r20, r16
 212:	8c 81       	ldd	r24, Y+4	; 0x04
 214:	9d 81       	ldd	r25, Y+5	; 0x05
 216:	0e 94 c0 00 	call	0x180	; 0x180 <ShiftPort>
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	df 90       	pop	r13
 228:	cf 90       	pop	r12
 22a:	08 95       	ret

0000022c <main>:


short joystickState = RELEASED;

int main(void)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	2c 97       	sbiw	r28, 0x0c	; 12
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
	DDRB = (1 << DDB1) | (1 << DDB2) | (1 << DDB3); //Sets the rgb pins to output
 240:	8e e0       	ldi	r24, 0x0E	; 14
 242:	84 b9       	out	0x04, r24	; 4
/*				ports and register locations, takes a pointer to the	*/
/*				struct then all the needed values						*/
/************************************************************************/
void InitializeLed(struct LedPin * pin, int port1, int port2, int port3, int regLoc1, int regLoc2, int regLoc3)
{
	pin->ports[0] = port1;
 244:	1a 82       	std	Y+2, r1	; 0x02
 246:	19 82       	std	Y+1, r1	; 0x01
	pin->ports[1] = port2;
 248:	1c 82       	std	Y+4, r1	; 0x04
 24a:	1b 82       	std	Y+3, r1	; 0x03
	pin->ports[2] = port3;
 24c:	1e 82       	std	Y+6, r1	; 0x06
 24e:	1d 82       	std	Y+5, r1	; 0x05

	pin->regLocs[0] = regLoc1;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	98 87       	std	Y+8, r25	; 0x08
 256:	8f 83       	std	Y+7, r24	; 0x07
	pin->regLocs[1] = regLoc2;
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	9a 87       	std	Y+10, r25	; 0x0a
 25e:	89 87       	std	Y+9, r24	; 0x09
	pin->regLocs[2] = regLoc3;
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	9c 87       	std	Y+12, r25	; 0x0c
 266:	8b 87       	std	Y+11, r24	; 0x0b

	struct LedPin rgbPin;

	InitializeLed(&rgbPin, B, B, B, DDB1, DDB2, DDB3);				//Initializes the rgb "pin" to hold the ports and registers of each node it is made of

	DDRC &= ( (0 << DDC0) | (0 << DDC1) | (0 << DDC2) | (0 << DDC3) | (0 << DDC4));		//Sets up the analog inputs to be read digitally as inputs
 268:	87 b1       	in	r24, 0x07	; 7
 26a:	17 b8       	out	0x07, r1	; 7

    /* Replace with your application code */
    while (1) 
    {

		ReadJoystickState(&joystickState);
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 71 00 	call	0xe2	; 0xe2 <ReadJoystickState>

		switch(joystickState)
 274:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 278:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	91 05       	cpc	r25, r1
 280:	19 f1       	breq	.+70     	; 0x2c8 <main+0x9c>
 282:	2c f4       	brge	.+10     	; 0x28e <main+0x62>
 284:	00 97       	sbiw	r24, 0x00	; 0
 286:	51 f0       	breq	.+20     	; 0x29c <main+0x70>
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	99 f0       	breq	.+38     	; 0x2b2 <main+0x86>
 28c:	ef cf       	rjmp	.-34     	; 0x26c <main+0x40>
 28e:	84 30       	cpi	r24, 0x04	; 4
 290:	91 05       	cpc	r25, r1
 292:	81 f1       	breq	.+96     	; 0x2f4 <main+0xc8>
 294:	24 f1       	brlt	.+72     	; 0x2de <main+0xb2>
 296:	05 97       	sbiw	r24, 0x05	; 5
 298:	c1 f1       	breq	.+112    	; 0x30a <main+0xde>
 29a:	e8 cf       	rjmp	.-48     	; 0x26c <main+0x40>
		{
		case UP:
		SetColor(&rgbPin, 1, 0, 1);								//Sets pin to be green
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SetColor>
		break;
 2b0:	dd cf       	rjmp	.-70     	; 0x26c <main+0x40>
		case LEFT:
		SetColor(&rgbPin, 0, 1, 1);								//Sets pin to be red
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	ce 01       	movw	r24, r28
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SetColor>
		break;
 2c6:	d2 cf       	rjmp	.-92     	; 0x26c <main+0x40>
		case DOWN:
		SetColor(&rgbPin, 1, 1, 0);								//Sets pin to be blue
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	50 e0       	ldi	r21, 0x00	; 0
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SetColor>
		break;
 2dc:	c7 cf       	rjmp	.-114    	; 0x26c <main+0x40>
		case RIGHT:
		SetColor(&rgbPin, 0, 0, 1);								//Sets pin to be yellow
 2de:	21 e0       	ldi	r18, 0x01	; 1
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SetColor>
		break;
 2f2:	bc cf       	rjmp	.-136    	; 0x26c <main+0x40>
		case PRESSED:
		SetColor(&rgbPin, 0, 1, 0);								//Sets pin to be magenta
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	ce 01       	movw	r24, r28
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SetColor>
		break;
 308:	b1 cf       	rjmp	.-158    	; 0x26c <main+0x40>
		case RELEASED:
		SetColor(&rgbPin, 0, 0, 0);		//Sets pin to be white
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	50 e0       	ldi	r21, 0x00	; 0
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	ce 01       	movw	r24, r28
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SetColor>
		break;
 31e:	a6 cf       	rjmp	.-180    	; 0x26c <main+0x40>

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
