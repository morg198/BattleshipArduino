
Battleship.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dd3  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083c  00000000  00000000  000011cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000507  00000000  00000000  00001a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00001f10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e4  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c9  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002b25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  78:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <JoyStickUp>:
	}
}

void DelayMicro(long t)
{
	while(t > 0)
  80:	89 b1       	in	r24, 0x09	; 9
  82:	86 95       	lsr	r24
  84:	86 95       	lsr	r24
  86:	91 e0       	ldi	r25, 0x01	; 1
  88:	89 27       	eor	r24, r25
  8a:	81 70       	andi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	08 95       	ret

00000090 <JoyStickLeft>:
  90:	89 b1       	in	r24, 0x09	; 9
  92:	82 95       	swap	r24
  94:	8f 70       	andi	r24, 0x0F	; 15
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	89 27       	eor	r24, r25
  9a:	81 70       	andi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	08 95       	ret

000000a0 <JoyStickDown>:
  a0:	89 b1       	in	r24, 0x09	; 9
  a2:	82 95       	swap	r24
  a4:	86 95       	lsr	r24
  a6:	87 70       	andi	r24, 0x07	; 7
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	89 27       	eor	r24, r25
  ac:	81 70       	andi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	08 95       	ret

000000b2 <JoyStickRight>:
  b2:	89 b1       	in	r24, 0x09	; 9
  b4:	82 95       	swap	r24
  b6:	86 95       	lsr	r24
  b8:	86 95       	lsr	r24
  ba:	83 70       	andi	r24, 0x03	; 3
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	89 27       	eor	r24, r25
  c0:	81 70       	andi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret

000000c6 <JoyStickPress>:
  c6:	89 b1       	in	r24, 0x09	; 9
  c8:	86 95       	lsr	r24
  ca:	86 95       	lsr	r24
  cc:	86 95       	lsr	r24
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	89 27       	eor	r24, r25
  d2:	81 70       	andi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	08 95       	ret

000000d8 <ClearPin>:
  d8:	fc 01       	movw	r30, r24
  da:	9c 01       	movw	r18, r24
  dc:	2a 5f       	subi	r18, 0xFA	; 250
  de:	3f 4f       	sbci	r19, 0xFF	; 255
  e0:	81 91       	ld	r24, Z+
  e2:	91 91       	ld	r25, Z+
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	91 05       	cpc	r25, r1
  e8:	41 f0       	breq	.+16     	; 0xfa <ClearPin+0x22>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	91 05       	cpc	r25, r1
  ee:	41 f0       	breq	.+16     	; 0x100 <ClearPin+0x28>
  f0:	89 2b       	or	r24, r25
  f2:	41 f4       	brne	.+16     	; 0x104 <ClearPin+0x2c>
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	15 b8       	out	0x05, r1	; 5
  f8:	05 c0       	rjmp	.+10     	; 0x104 <ClearPin+0x2c>
  fa:	88 b1       	in	r24, 0x08	; 8
  fc:	18 b8       	out	0x08, r1	; 8
  fe:	02 c0       	rjmp	.+4      	; 0x104 <ClearPin+0x2c>
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	1b b8       	out	0x0b, r1	; 11
 104:	e2 17       	cp	r30, r18
 106:	f3 07       	cpc	r31, r19
 108:	59 f7       	brne	.-42     	; 0xe0 <ClearPin+0x8>
 10a:	08 95       	ret

0000010c <ShiftPort>:
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 05       	cpc	r25, r1
 110:	71 f0       	breq	.+28     	; 0x12e <ShiftPort+0x22>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	91 05       	cpc	r25, r1
 116:	a1 f0       	breq	.+40     	; 0x140 <ShiftPort+0x34>
 118:	89 2b       	or	r24, r25
 11a:	d1 f4       	brne	.+52     	; 0x150 <ShiftPort+0x44>
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	02 c0       	rjmp	.+4      	; 0x124 <ShiftPort+0x18>
 120:	44 0f       	add	r20, r20
 122:	55 1f       	adc	r21, r21
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <ShiftPort+0x14>
 128:	48 2b       	or	r20, r24
 12a:	45 b9       	out	0x05, r20	; 5
 12c:	08 95       	ret
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	02 c0       	rjmp	.+4      	; 0x136 <ShiftPort+0x2a>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <ShiftPort+0x26>
 13a:	48 2b       	or	r20, r24
 13c:	48 b9       	out	0x08, r20	; 8
 13e:	08 95       	ret
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	02 c0       	rjmp	.+4      	; 0x148 <ShiftPort+0x3c>
 144:	44 0f       	add	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <ShiftPort+0x38>
 14c:	48 2b       	or	r20, r24
 14e:	4b b9       	out	0x0b, r20	; 11
 150:	08 95       	ret

00000152 <SetColor>:
 152:	cf 92       	push	r12
 154:	df 92       	push	r13
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
 164:	6b 01       	movw	r12, r22
 166:	7a 01       	movw	r14, r20
 168:	89 01       	movw	r16, r18
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	9f e1       	ldi	r25, 0x1F	; 31
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <SetColor+0x1c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <SetColor+0x22>
 174:	00 00       	nop
 176:	ce 01       	movw	r24, r28
 178:	0e 94 6c 00 	call	0xd8	; 0xd8 <ClearPin>
 17c:	6e 81       	ldd	r22, Y+6	; 0x06
 17e:	7f 81       	ldd	r23, Y+7	; 0x07
 180:	a6 01       	movw	r20, r12
 182:	88 81       	ld	r24, Y
 184:	99 81       	ldd	r25, Y+1	; 0x01
 186:	0e 94 86 00 	call	0x10c	; 0x10c <ShiftPort>
 18a:	68 85       	ldd	r22, Y+8	; 0x08
 18c:	79 85       	ldd	r23, Y+9	; 0x09
 18e:	a7 01       	movw	r20, r14
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	9b 81       	ldd	r25, Y+3	; 0x03
 194:	0e 94 86 00 	call	0x10c	; 0x10c <ShiftPort>
 198:	6a 85       	ldd	r22, Y+10	; 0x0a
 19a:	7b 85       	ldd	r23, Y+11	; 0x0b
 19c:	a8 01       	movw	r20, r16
 19e:	8c 81       	ldd	r24, Y+4	; 0x04
 1a0:	9d 81       	ldd	r25, Y+5	; 0x05
 1a2:	0e 94 86 00 	call	0x10c	; 0x10c <ShiftPort>
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	df 90       	pop	r13
 1b4:	cf 90       	pop	r12
 1b6:	08 95       	ret

000001b8 <main>:




int main(void)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	2c 97       	sbiw	r28, 0x0c	; 12
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61
	DDRB = (1 << DDB1) | (1 << DDB2) | (1 << DDB3); //Sets the rgb pins to output
 1cc:	8e e0       	ldi	r24, 0x0E	; 14
 1ce:	84 b9       	out	0x04, r24	; 4
/*				ports and register locations, takes a pointer to the	*/
/*				struct then all the needed values						*/
/************************************************************************/
void InitializeLed(struct LedPin * pin, int port1, int port2, int port3, int regLoc1, int regLoc2, int regLoc3)
{
	pin->ports[0] = port1;
 1d0:	1a 82       	std	Y+2, r1	; 0x02
 1d2:	19 82       	std	Y+1, r1	; 0x01
	pin->ports[1] = port2;
 1d4:	1c 82       	std	Y+4, r1	; 0x04
 1d6:	1b 82       	std	Y+3, r1	; 0x03
	pin->ports[2] = port3;
 1d8:	1e 82       	std	Y+6, r1	; 0x06
 1da:	1d 82       	std	Y+5, r1	; 0x05

	pin->regLocs[0] = regLoc1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	98 87       	std	Y+8, r25	; 0x08
 1e2:	8f 83       	std	Y+7, r24	; 0x07
	pin->regLocs[1] = regLoc2;
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	9a 87       	std	Y+10, r25	; 0x0a
 1ea:	89 87       	std	Y+9, r24	; 0x09
	pin->regLocs[2] = regLoc3;
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	9c 87       	std	Y+12, r25	; 0x0c
 1f2:	8b 87       	std	Y+11, r24	; 0x0b

    /* Replace with your application code */
    while (1) 
    {

		if(JoyStickUp())
 1f4:	0e 94 40 00 	call	0x80	; 0x80 <JoyStickUp>
 1f8:	89 2b       	or	r24, r25
 1fa:	59 f0       	breq	.+22     	; 0x212 <main+0x5a>
		{
			SetColor(&rgbPin, 1, 0, 1);								//Sets pin to be green
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	ce 01       	movw	r24, r28
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	0e 94 a9 00 	call	0x152	; 0x152 <SetColor>
 210:	f1 cf       	rjmp	.-30     	; 0x1f4 <main+0x3c>
		}
		else if(JoyStickLeft())
 212:	0e 94 48 00 	call	0x90	; 0x90 <JoyStickLeft>
 216:	89 2b       	or	r24, r25
 218:	59 f0       	breq	.+22     	; 0x230 <main+0x78>
		{
			SetColor(&rgbPin, 0, 1, 1);								//Sets pin to be red
 21a:	21 e0       	ldi	r18, 0x01	; 1
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	ce 01       	movw	r24, r28
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	0e 94 a9 00 	call	0x152	; 0x152 <SetColor>
 22e:	e2 cf       	rjmp	.-60     	; 0x1f4 <main+0x3c>
		}
		else if(JoyStickDown())
 230:	0e 94 50 00 	call	0xa0	; 0xa0 <JoyStickDown>
 234:	89 2b       	or	r24, r25
 236:	59 f0       	breq	.+22     	; 0x24e <main+0x96>
		{
			SetColor(&rgbPin, 1, 1, 0);								//Sets pin to be blue
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	ce 01       	movw	r24, r28
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	0e 94 a9 00 	call	0x152	; 0x152 <SetColor>
 24c:	d3 cf       	rjmp	.-90     	; 0x1f4 <main+0x3c>
		}
		else if(JoyStickRight())
 24e:	0e 94 59 00 	call	0xb2	; 0xb2 <JoyStickRight>
 252:	89 2b       	or	r24, r25
 254:	59 f0       	breq	.+22     	; 0x26c <main+0xb4>
		{
			SetColor(&rgbPin, 0, 0, 1);								//Sets pin to be yellow
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	ce 01       	movw	r24, r28
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	0e 94 a9 00 	call	0x152	; 0x152 <SetColor>
 26a:	c4 cf       	rjmp	.-120    	; 0x1f4 <main+0x3c>
		}
		else if(JoyStickPress())
 26c:	0e 94 63 00 	call	0xc6	; 0xc6 <JoyStickPress>
 270:	89 2b       	or	r24, r25
 272:	59 f0       	breq	.+22     	; 0x28a <main+0xd2>
		{
			SetColor(&rgbPin, 0, 1, 0);								//Sets pin to be magenta
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	ce 01       	movw	r24, r28
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	0e 94 a9 00 	call	0x152	; 0x152 <SetColor>
 288:	b5 cf       	rjmp	.-150    	; 0x1f4 <main+0x3c>
		}
		else
		{
			SetColor(&rgbPin, 0, 0, 0);		//Sets pin to be white
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	ce 01       	movw	r24, r28
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	0e 94 a9 00 	call	0x152	; 0x152 <SetColor>
 29e:	aa cf       	rjmp	.-172    	; 0x1f4 <main+0x3c>

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
